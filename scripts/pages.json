[{"name":"abstract class MviStorage<STATE, ACTION : Any, EVENT>(reducers: Set<Reducer<ACTION, STATE, ACTION, EVENT>>, initStateFactory: InitStateFactory<STATE>, coroutineDispatcher: CoroutineDispatcher, logger: MviLogger)","description":"MviStorage","location":"lib/[root]/-mvi-storage/index.html","searchKeys":["MviStorage","abstract class MviStorage<STATE, ACTION : Any, EVENT>(reducers: Set<Reducer<ACTION, STATE, ACTION, EVENT>>, initStateFactory: InitStateFactory<STATE>, coroutineDispatcher: CoroutineDispatcher, logger: MviLogger)","MviStorage"]},{"name":"abstract class MviViewModel<STATE, ACTION : Any, EVENT>(mviStorage: MviStorage<STATE, ACTION, EVENT>) : ViewModel","description":"MviViewModel","location":"lib/[root]/-mvi-view-model/index.html","searchKeys":["MviViewModel","abstract class MviViewModel<STATE, ACTION : Any, EVENT>(mviStorage: MviStorage<STATE, ACTION, EVENT>) : ViewModel","MviViewModel"]},{"name":"abstract fun createInitState(): STATE","description":"InitStateFactory.createInitState","location":"lib/[root]/-init-state-factory/create-init-state.html","searchKeys":["createInitState","abstract fun createInitState(): STATE","InitStateFactory.createInitState"]},{"name":"abstract fun e(throwable: Throwable)","description":"MviLogger.e","location":"lib/[root]/-mvi-logger/e.html","searchKeys":["e","abstract fun e(throwable: Throwable)","MviLogger.e"]},{"name":"abstract fun i(message: String)","description":"MviLogger.i","location":"lib/[root]/-mvi-logger/i.html","searchKeys":["i","abstract fun i(message: String)","MviLogger.i"]},{"name":"abstract suspend fun reduce(action: ACTION, getState: () -> STATE): Reducer.Result<STATE, NEXT, EVENT?>","description":"Reducer.reduce","location":"lib/[root]/-reducer/reduce.html","searchKeys":["reduce","abstract suspend fun reduce(action: ACTION, getState: () -> STATE): Reducer.Result<STATE, NEXT, EVENT?>","Reducer.reduce"]},{"name":"abstract val actionClass: KClass<ACTION>","description":"Reducer.actionClass","location":"lib/[root]/-reducer/action-class.html","searchKeys":["actionClass","abstract val actionClass: KClass<ACTION>","Reducer.actionClass"]},{"name":"constructor(mviStorage: MviStorage<STATE, ACTION, EVENT>)","description":"MviViewModel.MviViewModel","location":"lib/[root]/-mvi-view-model/-mvi-view-model.html","searchKeys":["MviViewModel","constructor(mviStorage: MviStorage<STATE, ACTION, EVENT>)","MviViewModel.MviViewModel"]},{"name":"constructor(reducers: Set<Reducer<ACTION, STATE, ACTION, EVENT>>, initStateFactory: InitStateFactory<STATE>, coroutineDispatcher: CoroutineDispatcher, logger: MviLogger)","description":"MviStorage.MviStorage","location":"lib/[root]/-mvi-storage/-mvi-storage.html","searchKeys":["MviStorage","constructor(reducers: Set<Reducer<ACTION, STATE, ACTION, EVENT>>, initStateFactory: InitStateFactory<STATE>, coroutineDispatcher: CoroutineDispatcher, logger: MviLogger)","MviStorage.MviStorage"]},{"name":"constructor(state: STATE, action: NEXT_ACTION? = null, event: EVENT? = null)","description":"Reducer.Result.Result","location":"lib/[root]/-reducer/-result/-result.html","searchKeys":["Result","constructor(state: STATE, action: NEXT_ACTION? = null, event: EVENT? = null)","Reducer.Result.Result"]},{"name":"data class Result<out STATE, out NEXT_ACTION, out EVENT>(val state: STATE, val action: NEXT_ACTION? = null, val event: EVENT? = null)","description":"Reducer.Result","location":"lib/[root]/-reducer/-result/index.html","searchKeys":["Result","data class Result<out STATE, out NEXT_ACTION, out EVENT>(val state: STATE, val action: NEXT_ACTION? = null, val event: EVENT? = null)","Reducer.Result"]},{"name":"expect fun getPlatformName(): String","description":"getPlatformName","location":"lib/[root]/get-platform-name.html","searchKeys":["getPlatformName","expect fun getPlatformName(): String","getPlatformName"]},{"name":"fun onAction(action: ACTION)","description":"MviViewModel.onAction","location":"lib/[root]/-mvi-view-model/on-action.html","searchKeys":["onAction","fun onAction(action: ACTION)","MviViewModel.onAction"]},{"name":"interface InitStateFactory<STATE>","description":"InitStateFactory","location":"lib/[root]/-init-state-factory/index.html","searchKeys":["InitStateFactory","interface InitStateFactory<STATE>","InitStateFactory"]},{"name":"interface MviLogger","description":"MviLogger","location":"lib/[root]/-mvi-logger/index.html","searchKeys":["MviLogger","interface MviLogger","MviLogger"]},{"name":"interface Reducer<ACTION : NEXT, STATE, NEXT : Any, EVENT>","description":"Reducer","location":"lib/[root]/-reducer/index.html","searchKeys":["Reducer","interface Reducer<ACTION : NEXT, STATE, NEXT : Any, EVENT>","Reducer"]},{"name":"suspend fun process(action: ACTION)","description":"MviStorage.process","location":"lib/[root]/-mvi-storage/process.html","searchKeys":["process","suspend fun process(action: ACTION)","MviStorage.process"]},{"name":"val action: NEXT_ACTION? = null","description":"Reducer.Result.action","location":"lib/[root]/-reducer/-result/action.html","searchKeys":["action","val action: NEXT_ACTION? = null","Reducer.Result.action"]},{"name":"val event: EVENT? = null","description":"Reducer.Result.event","location":"lib/[root]/-reducer/-result/event.html","searchKeys":["event","val event: EVENT? = null","Reducer.Result.event"]},{"name":"val event: Flow<EVENT>","description":"MviStorage.event","location":"lib/[root]/-mvi-storage/event.html","searchKeys":["event","val event: Flow<EVENT>","MviStorage.event"]},{"name":"val event: Flow<EVENT>","description":"MviViewModel.event","location":"lib/[root]/-mvi-view-model/event.html","searchKeys":["event","val event: Flow<EVENT>","MviViewModel.event"]},{"name":"val state: STATE","description":"Reducer.Result.state","location":"lib/[root]/-reducer/-result/state.html","searchKeys":["state","val state: STATE","Reducer.Result.state"]},{"name":"val state: StateFlow<STATE>","description":"MviStorage.state","location":"lib/[root]/-mvi-storage/state.html","searchKeys":["state","val state: StateFlow<STATE>","MviStorage.state"]},{"name":"val state: StateFlow<STATE>","description":"MviViewModel.state","location":"lib/[root]/-mvi-view-model/state.html","searchKeys":["state","val state: StateFlow<STATE>","MviViewModel.state"]}]